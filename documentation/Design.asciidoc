:toc: macro
toc::[]
:imagesdir: ./images/Design

[[jump-the-queue-project]]
= Jump The Queue Project

[[project-introduction.-statement-of-purpose]]
== *1. Project Introduction. Statement of Purpose*

Existing systems to manage queues and turns consists only in the assignation of a number without any associated logic that improves user experience and give value to user and to queue owner.

Classic systems do not allow to know at what time will be each turn. In addition, clients only can consult queue status if he stays at the queue location. This provoke a bad user experience because he must to stay in the queue all waiting time. Besides, in an amount of cases, this causes that some users leave the queue because the long waiting time, provoking the loss of the sales.

Ideally the users of the queue have to be able to know at what hour could be its turn. It is very important because he can improve its time and he will need to wait in the queue and only go when its time reaches.

Besides, to facilitate that the user has not to be in the queue waiting its turn, he can consult the queue status at any device that he can have. (for example a mobile phone, tablet,  ..)

As value added, queue owners will be able to prioritize users at the queue to have the possibility of creating marketing campaigns.

A successful solution would be to improve user experience facilitating that the user has not to be in the queue waiting its turn.

[[objectives]]
== *2. Objectives*

The objectives of the project are:

* Eliminate the needed of stay waiting in a queue.
* Improve user experience, easing the access to the queue.
* The system has to be simple and easily scalable and extensible

[[first-steps-analysis]]
== *3. First Steps Analysis*

This is the link:///171124_ADCenter_JTQ_First_Steps_Analysis_Document_V1_4.pptx[First Steps Analysis] presentation used to present and validate our understanding of the User Stories and behaviour of the future solution with customer.

[[user-stories]]
== *4. User Stories*

The first objective of Jump the Queue component is to improve the time management of the user, providing the needed functionalities to do so.

The solution focus on this premise and has to facilitate the process of accessing and consulting to the queue.

Roughly, the entire process that a user will follow to obtain and consult the access code of a queue will be:

image::ProcessMap.png[]

The main actors that will interact with jump the queue component will be the following:

-      User: It is an internal user of the external system that creates the queue and it will have privilege access to the queue.

-      Visitor: User of the queue component that does not exist in the external system that created the queue.

-      Owner: User that manages the queue.

In the next points, we can see the details of the user stories that define the minimum functionality of Jump the Queue component.

We can see the proposed user story map at the following figure.

image::UserStoryMap.png[]

[[epic-1.-get-a-number]]
=== *Epic 1. Get a number*

This epic contains all needed functions that allow users to get a number for entering in the queue.

To perform this step, Jump the queue must support the following:

1ยบ Accept terms & conditions.

2ยบ Register for the queue. To accomplish this, the component must validate the personal information.

3ยบ Obtain the code to access to the queue.

The user stories that define this epic are:

[[user-story-1.-accept-terms-conditions]]
==== User story 1. Accept terms & conditions

[cols=",,,",options="header",]
|==================================================================================
|Story Narrative |Accept terms & conditions |Priority |5
|As |visitor  |Size |
|I need to |accept the terms and conditions of the queue |Dependency |
|So that |I can access the Jump the Queue system | |
|Acceptance Criteria a|
- The terms and conditions of the queue need to be configured by the queue owner.

- The user can read the terms and conditions statement corresponding to the queue the user is trying to access.

- The system will ask to accept the terms and conditions of the queue before generating an access code.

 | |
|==================================================================================

[[user-story-2.-verify-information]]
==== User story 2. Verify information

[cols=",,,",options="header",]
|================================================================================
|Story Narrative |Verify information |Priority |5
|As |visitor  |Size |
|I need |my telephone number and email to be verified |Dependency | US4
|So that |their validity is confirmed | |
|Acceptance Criteria a|
- Upon a queue registration request, the user receives and email with a validation code and identificator for that queue.

- The user can use the validation code to verify the email and telephone number.

- When a user uses the validation code for the first time the telephone number and email are verified. Next time the user tries to use the validation code the system will not do any action.


 | |
|================================================================================

[[user-story-3.-consent-information]]
==== User story 3. Consent information

[cols=",,,",options="header",]
|==================================================================================
|Story Narrative |Consent information |Priority |1
|As |visitor  |Size |
|I want to |give my permission to use my personal information for commercial use |Dependency |
|So that |I can receive commercial notifications | |
|Acceptance Criteria a|
- By default the commercial notifications are de-activated.

- If the user gives permission to use his or her personal information for commercial use, the system activates the commercial notifications.

 | |
|==================================================================================

[[user-story-4.-register]]
==== User story 4. Register and request access

[cols=",,,",options="header",]
|======================================================================================================
|Story Narrative |Register |Priority |10
|As |visitor  |Size |
|I want to |register and request an access code for the queue |Dependency | US1, US2
|So that |I can be attended in this queue | |
|Acceptance Criteria a|
- The user has to provide a new telephone number, email and name. All these fields are mandatory.

- If an email and telephone number have been already used to request access to a queue, they cannot be used again in the same queue until the user is attended. As soon as the user is attended, this user can request a new access code by providing the identificator for this queue and the associated email or telephone number.

- Upon validation of the email and telephone number, the user gets registered and is assigned an access code for the queue.

- The access code is formatted as a "Q" plus a number between 0 and 999, which is the next free number, e.g. Q001.

- The numbering starts at value 0. If the number has reached 999, the numbering continues with value 0.

 | |
|======================================================================================================

[[user-story-5.-priority-access]]
==== User story 5. Priority access

[cols=",,,",options="header",]
|======================================================================================================
|Story Narrative |Priority access |Priority |5
|As |VIP user  |Size |
|I want to |get priority access code to the queue  |Dependency |
|So that |I will be served earlier | |
|Acceptance Criteria a|

- The access code will be formatted as an "A" plus a number between 0 and 999, which will be the next free number, e.g. A001.

- The numbering starts at value 0. If the number has reached 999, the numbering continues with 0.

 | |
|======================================================================================================

[[epic-2.-consult-the-queue]]
=== *Epic 2. Consult the queue*

This step contains all functions to consult the status of the user in the queue.

Jump the queue must support the following:

- Show people their position in the queue
- Show the estimated time to be attended

The user stories that define this epic are:

[[user-story-6.-consult-queue]]
==== User story 6. Consult Queue

[cols=",,,",options="header",]
|===============================================================================================================================================================================
|Story Narrative |Consult queue |Priority |10
|As |visitor or VIP user or owner |Size |
|I want to |consult the status of the queue |Dependency |
|So that |I can know who is being served, when I am expected to be served and how I will be called | |
|Acceptance Criteria a|
- The visitor and VIP users have to provide the identificator generated for this queue and the email or telephone number used to register in that queue.

- The system will respond showing the access code of the user, the name, the estimated time and the list of unattended access codes for this queue.

- The list of unattended access codes will be arranged in chronological order, placing first the priority access codes (Axxx) and then the rest of access codes (Qxxx).

- The users registered for the queue can consult the status of the queue at any moment.

- The owner of the queue can see the access code of the current turn.


 | |
|===============================================================================================================================================================================

[[user-story-7.-waiting-time]]
==== User story 7. Waiting time

[cols=",,,",options="header",]
|==================================================================================================================================================================================================================
|Story Narrative |Waiting time |Priority |10
|As |visitor or internal user |Size |
|I want to |see my estimated waiting time |Dependency |
|So that |I would know when I will be attended | |
|Acceptance Criteria a|
- The system has to calculate the estimated time with the following formula: current hour + (Sum(The last ten attention time)/nยบ of attended turn counted)*(number of non-attended turns in the queue before this).

- The number cannot be less than a configurable value.

- The attention time is the difference between the start time and the end time.

 | |
|==================================================================================================================================================================================================================

[[epic-3.-manage-queue]]
=== *Epic 3. Manage queue*

It contains all functions that allow to manage the queue in order to configure and attend active turn.

The user stories that define this are:

[[user-story-8.-configure-queue]]
==== User story 8. Configure queue

[cols=",,,",options="header",]
|=============================================================================
|Story Narrative |Configure queue |Priority |5
|As |jump the queue owner of the queue |Size |
|I want to |personalize the logo and description showed to users |Dependency |
|So that |I can personalize my business | |
|Acceptance Criteria a|
- The system allows to configure a logo and description.

- Jump the queue front shows the logo and description

 | |
|=============================================================================

[[user-story-9.-attend-queue]]
==== User story 9. Attend queue

[cols=",,,",options="header",]
|================================================================
|Story Narrative |Attend queue |Priority |10
|As |jump the queue owner of the queue |Size |
|I need to |know the current turn of the queue |Dependency |
|So that |I can attend it | |
|Acceptance Criteria a|
* The turn has to be the first in the queue that is non-attended.

* The system must save:

** At the previous turn: Save the current time as end time

** At the new turn: Save the current time as start time

 | |
|================================================================

[[site-map]]
== *5. Site Map*

We proposed the following sitemap and screens structures to support the requirements that must fulfill the solution.

image::SiteMap.png[]

1ยบ Select Queue. This step will not be a screen and represent the operation that a user will follow to enter to Jump the Queue.

2ยบ Request/ Insert code. This functionality represents the process that a user has to follow to obtain a ticket number. The proposed screen will only apply to visitors users because existing users will have a direct access to step 3.

image::InsertCode.png[]

3ยบ Assigned Order / Show Queue. Here, the user can consult its number and the list of people in the queue.

image::ShowQueue.png[]

Finally, the owner of the queue can consult and pass the turn with the consult screen and with a button at the screen or pressing a physical button.

image::ServeQueue.png[]

[[entity-relationship-diagram]]
== *6. Entity relationship diagram*

Starting from the list of user stories, we found the below entities to support them.

image::ER.png[]

Each entity will content the following information:


.1. Visitor Information
It contains the personal information of the visitors who gave the permission to use it.
[cols="",options="header",]
|======================================================================================
| Attribute| Type
|Name | String
|Telephone | TelephoneType
|Email | EmailType
|======================================================================================

.2 Terms and conditions
It describes the Terms and conditions that the user must accept to use the queue.
[cols="",options="header",]
|================================================================================
| Attribute| Type
|Description | String
|================================================================================

.3 Queue owner
It contains information for the users that can manage queues.
[cols="",options="header",]
|================================================================================
| Attribute| Type
|User |userIdType
|Name |String
|Email |EmailType
|Password |PasswordType
|================================================================================

.4 Queue
It contains the information that describes a queue.
[cols="",options="header",]
|================================================================================
| Attribute| Type
|Description |String
|Logo |Image
|================================================================================

.5 Access code
It contains the list people that are in the queue and their information..
[cols="",options="header",]
|================================================================================
| Attribute| Type
|Id_code |String. Assigned code. PK
|Name |String
|Email |EmailType
|Telephone |TelephoneType
|CreationTime |Time (HH:MM). The hour when the user got the turn
|StartTime |Time (HH:MM). The hour when the attendance of the user starts
|EndTime |Time (HH:MM). The hour when the attendance of the user ends
|EstimatedTime |Time (HH:MM). The hour which the system estimated when the user will be attended
|================================================================================


[[bounded-context]]
== *7. Bounded context*

In this point, we will define the bounded context of the final solution.

In the figure below we have three domains, one for each related Epic.

* Obtain Access code domain: As we saw at epic chapter, this domain contains the required logic to get a turn in the queue. The related entities are:

** Access code: It is shared with Consult queue status domain.
** Queue: It is shared by the three domains.
** Personal information
** Terms and conditions: This is shared with Manage queue domain.

* Consult queue status domain: It has the needed logic to check turn status. This is supported by the entities:

** Access Code: It is shared with Obtain access code domain.
** Queue: It is shared by the three domains.

* Manage queue domain: This domain contains all functionalities to configurate the queues and their owners.

** Queue: It is shared by the three domains.
** Terms and conditions: This is shared with Manage queue domain.
** Queue owner.

image::BoundedContext.png[]

[[glossary-of-terms]]
== *8. Glossary of terms*

[cols=",",options="header",]
|===========================================================================================================================================================
|Term |Description
|Access code |This is the turn number assigned to a person.
|Validation code |It is a code used to confirm the validity of the email or telephone number informed by the user
|Estimated time |Stands for the time that the system calculates when the person in the queue will be attended
|Attention time |This is the time that it takes for a user to be attended. It is calculated as the difference between the start and the end of the attention
|Priority access |It is the access granted to privileged users so they can be attended earlier
|===========================================================================================================================================================


image:http://i.creativecommons.org/l/by-nd/4.0/88x31.png[]

This documentation is licensed under the link:http://creativecommons.org/licenses/by-nd/4.0/[Creative Commons License (Attribution-NoDerivatives 4.0 International)]